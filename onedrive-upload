#!/bin/bash

export script_base_folder=$(dirname "$0")
export script_base_name=$(basename "$0")

source "${script_base_folder}/onedrive.cfg"
source "${script_base_folder}/onedrive-base"

export json_parser="${script_base_folder}/libs/json/bash-json-parser"
export debug_mode=0
export rename_mode=0
export silent_mode=0

files=()

while [[ $# -ge 1 ]]; do
    case $1 in
        -h|--help)
            echo "Usage: ${script_base_name} [OPTIONS] file1 [file2...]"
            echo ""
            echo "Options:"
            echo "  .d, --debug    Enable debug mode."
            echo "      --dotfiles Upload dotfiles."
            echo "  -f, --folder   Upload files into this remote folder."
            echo "                 Directory names are separated with a slash, e.g."
            echo "                 rootFolder/subFolder"
            echo "                 Do NOT use a trailing slash!"
            echo "  -h, --help     Show this help."
            echo "  -r, --rename   Rename the files during upload."
            echo "                 For each file you specify you MUST also specify"
            echo "                 the remote filename as the subsequent parameter."
            echo "                 WARNINGS:"
            echo "                 1. Be especially careful with globbing."
            echo "                 2. This disables recursive uploads."
            exit 0
            ;;
        -f|--folder)
            shift
            folder_name="${1%/}"
            shift
            ;;
        -r|--rename)
            shift
            rename_mode=1
            ;;
        -d|--debug)
            shift
            debug_mode=1
            ;;
        --dotfiles)
            shift
            shopt -s dotglob
            ;;
        *)
            break;
            ;;
    esac
done

if [ -z "$1" ]; then
        echo "Please specify at least one file to upload"
        exit 1
fi

# $1=subfolder name
function resolve_folder_id() {
    local folder_array
    local subfolder=${1#/}

    if [ -n "${folder_name}" ]; then
        IFS='/' read -a folder_array <<< "${folder_name}/${subfolder}"
    else
        IFS='/' read -a folder_array <<< "${subfolder}"
    fi

    resolved_folder_id=$(onedrive_get_or_create_folder "${folder_array[@]}")
    exit_on_error
}

function expand_directories() {
    local current_id=$1
    shift

    local prefix_len=$1
    shift

    while [[ $# -ge 1 ]]; do
        if [ -f "$1" ]; then
            files+=("${current_id}")
            files+=("$1")
        elif [ -d "$1" ]; then
            if [ ${prefix_len} -eq -1 ]; then
                local directory=$(dirname "$1")

                if [ "${directory}" == "." ]; then
                    prefix_len=0
                else
                    prefix_len=${#directory}
                fi
            fi

            local folder="${1%/}"
            resolve_folder_id "${1:${prefix_len}}"

            local sub=("${folder}/"*)

            if test -e "${sub}"; then
                expand_directories "${resolved_folder_id}" "${prefix_len}" "${sub[@]}"
            fi
        else
            echo "File not found $1"
            exit 1
        fi

        shift
    done
}

function start_upload() {
    source "${script_base_folder}/onedrive-base"

    onedrive_upload_file "$1" "$2"
}
export -f start_upload

function start_recursive_upload() {
    source "${script_base_folder}/onedrive-base"

    export api_folder_id="$1"
    onedrive_upload_file "$2"
}
export -f start_recursive_upload

if [ -n "${folder_name}" ]; then
    resolve_folder_id ""
else
    resolved_folder_id=${api_root_folder}
fi

if [ "${rename_mode}" == "0" ]; then
    expand_directories "${resolved_folder_id}" -1 "${@}"

    if [ ${#files} -eq 0 ]; then
        info "Folder structure created, no files uploaded"
    else
        printf "%s\0" "${files[@]}" | xargs -0 -n2 -P${max_upload_threads} bash -c 'start_recursive_upload "$1" "$2"' bash
    fi
else
    export api_folder_id="${resolved_folder_id}"
    printf "%s\0" "${@}" | xargs -0 -n2 -P${max_upload_threads} bash -c 'start_upload "$1" "$2"' bash
fi

